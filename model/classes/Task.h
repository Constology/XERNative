#ifndef XERPARSER_TASK_H
#define XERPARSER_TASK_H

#include "../../Date/Date.h"
#include "../TaskRsrcs.h"
#include "TaskRsrc.h"

#include <iostream>
#include <string>
#include <vector>
class Reader;

class Task {
public:
    int getTaskId();
    void setTaskId(int value);
    int getProjId();
    void setProjId(int value);
    int getWbsId();
    void setWbsId(int value);
    int getClndrId();
    void setClndrId(int value);
    int getRsrcId();
    void setRsrcId(int value);
    int getLocationId();
    void setLocationId(int value);
    float getTotalFloatHrCnt();
    void setTotalFloatHrCnt(float value);
    float getFreeFloatHrCnt();
    void setFreeFloatHrCnt(float value);
    float getRemainDrtnHrCnt();
    void setRemainDrtnHrCnt(float value);
    float getFloatPath();
    void setFloatPath(float value);
    float getFloatPathOrder();
    void setFloatPathOrder(float value);
    std::string getPhysCompletePct();
    void setPhysCompletePct(std::string value);
    std::string getRevFdbkFlag();
    void setRevFdbkFlag(std::string value);
    std::string getEstWt();
    void setEstWt(std::string value);
    std::string getLockPlanFlag();
    void setLockPlanFlag(std::string value);
    std::string getAutoComputeActFlag();
    void setAutoComputeActFlag(std::string value);
    std::string getCompletePctType();
    void setCompletePctType(std::string value);
    std::string getTaskType();
    void setTaskType(std::string value);
    std::string getDurationType();
    void setDurationType(std::string value);
    std::string getStatusCode();
    void setStatusCode(std::string value);
    std::string getTaskCode();
    void setTaskCode(std::string value);
    std::string getTaskName();
    void setTaskName(std::string value);
    std::string getActWorkQty();
    void setActWorkQty(std::string value);
    std::string getRemainWorkQty();
    void setRemainWorkQty(std::string value);
    std::string getTargetWorkQty();
    void setTargetWorkQty(std::string value);
    std::string getTargetDrtnHrCnt();
    void setTargetDrtnHrCnt(std::string value);
    std::string getTargetEquipQty();
    void setTargetEquipQty(std::string value);
    std::string getActEquipQty();
    void setActEquipQty(std::string value);
    std::string getRemainEquipQty();
    void setRemainEquipQty(std::string value);
    std::string getCstrType();
    void setCstrType(std::string value);
    std::string getPriorityType();
    void setPriorityType(std::string value);
    std::string getGuid();
    void setGuid(std::string value);
    std::string getTmplGuid();
    void setTmplGuid(std::string value);
    std::string getCstrType2();
    void setCstrType2(std::string value);
    std::string getDrivingPathFlag();
    void setDrivingPathFlag(std::string value);
    std::string getActThisPerWorkQty();
    void setActThisPerWorkQty(std::string value);
    std::string getActThisPerEquipQty();
    void setActThisPerEquipQty(std::string value);
    std::string getCreateUser();
    void setCreateUser(std::string value);
    std::string getUpdateUser();
    void setUpdateUser(std::string value);
    Date getCstrDate();
    void setCstrDate(Date value);
    Date getActStartDate();
    void setActStartDate(Date value);
    Date getActEndDate();
    void setActEndDate(Date value);
    Date getLateStartDate();
    void setLateStartDate(Date value);
    Date getLateEndDate();
    void setLateEndDate(Date value);
    Date getExpectEndDate();
    void setExpectEndDate(Date value);
    Date getEarlyStartDate();
    void setEarlyStartDate(Date value);
    Date getEarlyEndDate();
    void setEarlyEndDate(Date value);
    Date getRestartDate();
    void setRestartDate(Date value);
    Date getReendDate();
    void setReendDate(Date value);
    Date getTargetStartDate();
    void setTargetStartDate(Date value);
    Date getTargetEndDate();
    void setTargetEndDate(Date value);
    Date getRemLateStartDate();
    void setRemLateStartDate(Date value);
    Date getRemLateEndDate();
    void setRemLateEndDate(Date value);
    Date getSuspendDate();
    void setSuspendDate(Date value);
    Date getResumeDate();
    void setResumeDate(Date value);
    Date getCstrDate2();
    void setCstrDate2(Date value);
    Date getExternalEarlyStartDate();
    void setExternalEarlyStartDate(Date value);
    Date getExternalLateEndDate();
    void setExternalLateEndDate(Date value);
    Date getCreateDate();
    void setCreateDate(Date value);
    Date getUpdateDate();
    void setUpdateDate(Date value);

    std::string get_tsv();
    std::vector<TaskRsrc> getResources();
    Task(std::vector<std::string> header, std::vector<std::string> params, Reader *readerObj);

private:
    int task_id;
    int proj_id;
    int wbs_id;
    int clndr_id;
    int rsrc_id;
    int location_id;
    float total_float_hr_cnt;
    float free_float_hr_cnt;
    float remain_drtn_hr_cnt;
    float float_path;
    float float_path_order;
    std::string phys_complete_pct;
    std::string rev_fdbk_flag;
    std::string est_wt;
    std::string lock_plan_flag;
    std::string auto_compute_act_flag;
    std::string complete_pct_type;
    std::string task_type;
    std::string duration_type;
    std::string status_code;
    std::string task_code;
    std::string task_name;
    std::string act_work_qty;
    std::string remain_work_qty;
    std::string target_work_qty;
    std::string target_drtn_hr_cnt;
    std::string target_equip_qty;
    std::string act_equip_qty;
    std::string remain_equip_qty;
    std::string cstr_type;
    std::string priority_type;
    std::string guid;
    std::string tmpl_guid;
    std::string cstr_type2;
    std::string driving_path_flag;
    std::string act_this_per_work_qty;
    std::string act_this_per_equip_qty;
    std::string create_user;
    std::string update_user;
    Date cstr_date;
    Date act_start_date;
    Date act_end_date;
    Date late_start_date;
    Date late_end_date;
    Date expect_end_date;
    Date early_start_date;
    Date early_end_date;
    Date restart_date;
    Date reend_date;
    Date target_start_date;
    Date target_end_date;
    Date rem_late_start_date;
    Date rem_late_end_date;
    Date suspend_date;
    Date resume_date;
    Date cstr_date2;
    Date external_early_start_date;
    Date external_late_end_date;
    Date create_date;
    Date update_date;

    Reader *reader;
    std::string tsv;
    void update_tsv();
    std::string task_id_str;
    std::string proj_id_str;
    std::string wbs_id_str;
    std::string clndr_id_str;
    std::string rsrc_id_str;
    std::string location_id_str;
    std::string total_float_hr_cnt_str;
    std::string free_float_hr_cnt_str;
    std::string remain_drtn_hr_cnt_str;
    std::string float_path_str;
    std::string float_path_order_str;
    std::string cstr_date_str;
    std::string act_start_date_str;
    std::string act_end_date_str;
    std::string late_start_date_str;
    std::string late_end_date_str;
    std::string expect_end_date_str;
    std::string early_start_date_str;
    std::string early_end_date_str;
    std::string restart_date_str;
    std::string reend_date_str;
    std::string target_start_date_str;
    std::string target_end_date_str;
    std::string rem_late_start_date_str;
    std::string rem_late_end_date_str;
    std::string suspend_date_str;
    std::string resume_date_str;
    std::string cstr_date2_str;
    std::string external_early_start_date_str;
    std::string external_late_end_date_str;
    std::string create_date_str;
    std::string update_date_str;
};

#endif // XERPARSER_TASK_H
